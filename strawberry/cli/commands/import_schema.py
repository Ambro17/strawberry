import re
from typing import List

import click

from graphql.language import parse
from graphql.errors import GraphqlError

from strawberry.utils.sdl_transpiler import render_template


# Regex pattern to extract import statement
GQL_IMPORT_REGEX = r"#import \"(.*\.gql|.*\.graphql)\""
GQL_SCHEMA_TYPE = r"(?si)^Schema.*?}"


@click.command("import-schema", short_help="Parses SDL file to strawberry types")
@click.argument("schema", type=str, required=True, nargs=-1)
def import_schema(schema):
    """ Parses SDL file to strawberry types and writes them out """

    templates = []  # Put rendered templates here
    try:
        ast = get_ast(schema)  # Get abstract syntax tree
        for definition in ast.definitions:
            # Parse and render specific ast definitions
            templates.append(render_template(definition))

        imports = "import strawberry"
        schema_string = "\n\n".join(templates)
        imports += "\nimport typing\n\n" if "typing" in schema_string else ""
        schema_string = imports + schema_string
        click.echo(schema_string)

    except FileNotFoundError:
        print(f"File or files not found on schema path: {schema}")

    except GraphQLError:
        # TODO: Test this to see if print output can be improved
        print("A file contains syntax errors")


def get_ast(paths):
    """ Parse the content of files to AST """
    gql_strings = list()
    # Looping through the passed argument paths
    for path in paths:
        gql_strings += gql_file_to_string(path)
    # Join read file strings and parse them to ast
    concatenation = "\n".join(gql_strings)
    # Replace schema {} with empty string, it will be generated by the server
    concatenation = re.sub(GQL_SCHEMA_TYPE, "", concatenation)
    ast = parse(concatenation)
    return ast


def gql_file_to_string(path: str) -> List[str]:
    """ Returns schema string """
    with open(path, "r") as file:
        string = file.read()
        string = re.sub(GQL_IMPORT_REGEX, "", string)
        string = re.sub(r"\n\n", "", string)

    return [string]
